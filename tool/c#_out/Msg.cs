// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Msg {

  /// <summary>Holder for reflection information generated from msg.proto</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class MsgReflection {

    #region Descriptor
    /// <summary>File descriptor for msg.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MsgReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cgltc2cucHJvdG8SA21zZyIfCgtDMlNfQWRkVXNlchIQCghVc2VyTmFtZRgB",
            "IAEoCSIeCgtDMlNfTWVzc2FnZRIPCgdNZXNzYWdlGAEgASgJIhgKCkMyU19B",
            "Y3Rpb24SCgoCT3AYASABKAkiHQoJUzJDX0xvZ2luEhAKCE51bVVzZXJzGAEg",
            "ASgFIjAKClMyQ19Kb2luZWQSEAoITnVtVXNlcnMYASABKAUSEAoIVXNlck5h",
            "bWUYAiABKAkiLgoIUzJDX0xlZnQSEAoITnVtVXNlcnMYASABKAUSEAoIVXNl",
            "ck5hbWUYAiABKAkiHgoKUzJDX1R5cGluZxIQCghVc2VyTmFtZRgBIAEoCSIi",
            "Cg5TMkNfU3RvcFR5cGluZxIQCghVc2VyTmFtZRgBIAEoCSIwCgtTMkNfTWVz",
            "c2FnZRIQCghVc2VyTmFtZRgBIAEoCRIPCgdNZXNzYWdlGAIgASgJYgZwcm90",
            "bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.C2S_AddUser), global::Msg.C2S_AddUser.Parser, new[]{ "UserName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.C2S_Message), global::Msg.C2S_Message.Parser, new[]{ "Message" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.C2S_Action), global::Msg.C2S_Action.Parser, new[]{ "Op" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.S2C_Login), global::Msg.S2C_Login.Parser, new[]{ "NumUsers" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.S2C_Joined), global::Msg.S2C_Joined.Parser, new[]{ "NumUsers", "UserName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.S2C_Left), global::Msg.S2C_Left.Parser, new[]{ "NumUsers", "UserName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.S2C_Typing), global::Msg.S2C_Typing.Parser, new[]{ "UserName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.S2C_StopTyping), global::Msg.S2C_StopTyping.Parser, new[]{ "UserName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.S2C_Message), global::Msg.S2C_Message.Parser, new[]{ "UserName", "Message" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class C2S_AddUser : pb::IMessage<C2S_AddUser> {
    private static readonly pb::MessageParser<C2S_AddUser> _parser = new pb::MessageParser<C2S_AddUser>(() => new C2S_AddUser());
    public static pb::MessageParser<C2S_AddUser> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.MsgReflection.Descriptor.MessageTypes[0]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public C2S_AddUser() {
      OnConstruction();
    }

    partial void OnConstruction();

    public C2S_AddUser(C2S_AddUser other) : this() {
      userName_ = other.userName_;
    }

    public C2S_AddUser Clone() {
      return new C2S_AddUser(this);
    }

    /// <summary>Field number for the "UserName" field.</summary>
    public const int UserNameFieldNumber = 1;
    private string userName_ = "";
    public string UserName {
      get { return userName_; }
      set {
        userName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as C2S_AddUser);
    }

    public bool Equals(C2S_AddUser other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserName != other.UserName) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (UserName.Length != 0) hash ^= UserName.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (UserName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(UserName);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (UserName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserName);
      }
      return size;
    }

    public void MergeFrom(C2S_AddUser other) {
      if (other == null) {
        return;
      }
      if (other.UserName.Length != 0) {
        UserName = other.UserName;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            UserName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class C2S_Message : pb::IMessage<C2S_Message> {
    private static readonly pb::MessageParser<C2S_Message> _parser = new pb::MessageParser<C2S_Message>(() => new C2S_Message());
    public static pb::MessageParser<C2S_Message> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.MsgReflection.Descriptor.MessageTypes[1]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public C2S_Message() {
      OnConstruction();
    }

    partial void OnConstruction();

    public C2S_Message(C2S_Message other) : this() {
      message_ = other.message_;
    }

    public C2S_Message Clone() {
      return new C2S_Message(this);
    }

    /// <summary>Field number for the "Message" field.</summary>
    public const int MessageFieldNumber = 1;
    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as C2S_Message);
    }

    public bool Equals(C2S_Message other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Message != other.Message) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Message.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    public void MergeFrom(C2S_Message other) {
      if (other == null) {
        return;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class C2S_Action : pb::IMessage<C2S_Action> {
    private static readonly pb::MessageParser<C2S_Action> _parser = new pb::MessageParser<C2S_Action>(() => new C2S_Action());
    public static pb::MessageParser<C2S_Action> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.MsgReflection.Descriptor.MessageTypes[2]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public C2S_Action() {
      OnConstruction();
    }

    partial void OnConstruction();

    public C2S_Action(C2S_Action other) : this() {
      op_ = other.op_;
    }

    public C2S_Action Clone() {
      return new C2S_Action(this);
    }

    /// <summary>Field number for the "Op" field.</summary>
    public const int OpFieldNumber = 1;
    private string op_ = "";
    /// <summary>
    ///  typing
    ///  stop typing
    /// </summary>
    public string Op {
      get { return op_; }
      set {
        op_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as C2S_Action);
    }

    public bool Equals(C2S_Action other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Op != other.Op) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Op.Length != 0) hash ^= Op.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Op.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Op);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Op.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Op);
      }
      return size;
    }

    public void MergeFrom(C2S_Action other) {
      if (other == null) {
        return;
      }
      if (other.Op.Length != 0) {
        Op = other.Op;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Op = input.ReadString();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class S2C_Login : pb::IMessage<S2C_Login> {
    private static readonly pb::MessageParser<S2C_Login> _parser = new pb::MessageParser<S2C_Login>(() => new S2C_Login());
    public static pb::MessageParser<S2C_Login> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.MsgReflection.Descriptor.MessageTypes[3]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public S2C_Login() {
      OnConstruction();
    }

    partial void OnConstruction();

    public S2C_Login(S2C_Login other) : this() {
      numUsers_ = other.numUsers_;
    }

    public S2C_Login Clone() {
      return new S2C_Login(this);
    }

    /// <summary>Field number for the "NumUsers" field.</summary>
    public const int NumUsersFieldNumber = 1;
    private int numUsers_;
    public int NumUsers {
      get { return numUsers_; }
      set {
        numUsers_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as S2C_Login);
    }

    public bool Equals(S2C_Login other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NumUsers != other.NumUsers) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (NumUsers != 0) hash ^= NumUsers.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (NumUsers != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(NumUsers);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (NumUsers != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumUsers);
      }
      return size;
    }

    public void MergeFrom(S2C_Login other) {
      if (other == null) {
        return;
      }
      if (other.NumUsers != 0) {
        NumUsers = other.NumUsers;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            NumUsers = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class S2C_Joined : pb::IMessage<S2C_Joined> {
    private static readonly pb::MessageParser<S2C_Joined> _parser = new pb::MessageParser<S2C_Joined>(() => new S2C_Joined());
    public static pb::MessageParser<S2C_Joined> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.MsgReflection.Descriptor.MessageTypes[4]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public S2C_Joined() {
      OnConstruction();
    }

    partial void OnConstruction();

    public S2C_Joined(S2C_Joined other) : this() {
      numUsers_ = other.numUsers_;
      userName_ = other.userName_;
    }

    public S2C_Joined Clone() {
      return new S2C_Joined(this);
    }

    /// <summary>Field number for the "NumUsers" field.</summary>
    public const int NumUsersFieldNumber = 1;
    private int numUsers_;
    public int NumUsers {
      get { return numUsers_; }
      set {
        numUsers_ = value;
      }
    }

    /// <summary>Field number for the "UserName" field.</summary>
    public const int UserNameFieldNumber = 2;
    private string userName_ = "";
    public string UserName {
      get { return userName_; }
      set {
        userName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as S2C_Joined);
    }

    public bool Equals(S2C_Joined other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NumUsers != other.NumUsers) return false;
      if (UserName != other.UserName) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (NumUsers != 0) hash ^= NumUsers.GetHashCode();
      if (UserName.Length != 0) hash ^= UserName.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (NumUsers != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(NumUsers);
      }
      if (UserName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(UserName);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (NumUsers != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumUsers);
      }
      if (UserName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserName);
      }
      return size;
    }

    public void MergeFrom(S2C_Joined other) {
      if (other == null) {
        return;
      }
      if (other.NumUsers != 0) {
        NumUsers = other.NumUsers;
      }
      if (other.UserName.Length != 0) {
        UserName = other.UserName;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            NumUsers = input.ReadInt32();
            break;
          }
          case 18: {
            UserName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class S2C_Left : pb::IMessage<S2C_Left> {
    private static readonly pb::MessageParser<S2C_Left> _parser = new pb::MessageParser<S2C_Left>(() => new S2C_Left());
    public static pb::MessageParser<S2C_Left> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.MsgReflection.Descriptor.MessageTypes[5]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public S2C_Left() {
      OnConstruction();
    }

    partial void OnConstruction();

    public S2C_Left(S2C_Left other) : this() {
      numUsers_ = other.numUsers_;
      userName_ = other.userName_;
    }

    public S2C_Left Clone() {
      return new S2C_Left(this);
    }

    /// <summary>Field number for the "NumUsers" field.</summary>
    public const int NumUsersFieldNumber = 1;
    private int numUsers_;
    public int NumUsers {
      get { return numUsers_; }
      set {
        numUsers_ = value;
      }
    }

    /// <summary>Field number for the "UserName" field.</summary>
    public const int UserNameFieldNumber = 2;
    private string userName_ = "";
    public string UserName {
      get { return userName_; }
      set {
        userName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as S2C_Left);
    }

    public bool Equals(S2C_Left other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NumUsers != other.NumUsers) return false;
      if (UserName != other.UserName) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (NumUsers != 0) hash ^= NumUsers.GetHashCode();
      if (UserName.Length != 0) hash ^= UserName.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (NumUsers != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(NumUsers);
      }
      if (UserName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(UserName);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (NumUsers != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumUsers);
      }
      if (UserName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserName);
      }
      return size;
    }

    public void MergeFrom(S2C_Left other) {
      if (other == null) {
        return;
      }
      if (other.NumUsers != 0) {
        NumUsers = other.NumUsers;
      }
      if (other.UserName.Length != 0) {
        UserName = other.UserName;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            NumUsers = input.ReadInt32();
            break;
          }
          case 18: {
            UserName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class S2C_Typing : pb::IMessage<S2C_Typing> {
    private static readonly pb::MessageParser<S2C_Typing> _parser = new pb::MessageParser<S2C_Typing>(() => new S2C_Typing());
    public static pb::MessageParser<S2C_Typing> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.MsgReflection.Descriptor.MessageTypes[6]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public S2C_Typing() {
      OnConstruction();
    }

    partial void OnConstruction();

    public S2C_Typing(S2C_Typing other) : this() {
      userName_ = other.userName_;
    }

    public S2C_Typing Clone() {
      return new S2C_Typing(this);
    }

    /// <summary>Field number for the "UserName" field.</summary>
    public const int UserNameFieldNumber = 1;
    private string userName_ = "";
    public string UserName {
      get { return userName_; }
      set {
        userName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as S2C_Typing);
    }

    public bool Equals(S2C_Typing other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserName != other.UserName) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (UserName.Length != 0) hash ^= UserName.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (UserName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(UserName);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (UserName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserName);
      }
      return size;
    }

    public void MergeFrom(S2C_Typing other) {
      if (other == null) {
        return;
      }
      if (other.UserName.Length != 0) {
        UserName = other.UserName;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            UserName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class S2C_StopTyping : pb::IMessage<S2C_StopTyping> {
    private static readonly pb::MessageParser<S2C_StopTyping> _parser = new pb::MessageParser<S2C_StopTyping>(() => new S2C_StopTyping());
    public static pb::MessageParser<S2C_StopTyping> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.MsgReflection.Descriptor.MessageTypes[7]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public S2C_StopTyping() {
      OnConstruction();
    }

    partial void OnConstruction();

    public S2C_StopTyping(S2C_StopTyping other) : this() {
      userName_ = other.userName_;
    }

    public S2C_StopTyping Clone() {
      return new S2C_StopTyping(this);
    }

    /// <summary>Field number for the "UserName" field.</summary>
    public const int UserNameFieldNumber = 1;
    private string userName_ = "";
    public string UserName {
      get { return userName_; }
      set {
        userName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as S2C_StopTyping);
    }

    public bool Equals(S2C_StopTyping other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserName != other.UserName) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (UserName.Length != 0) hash ^= UserName.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (UserName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(UserName);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (UserName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserName);
      }
      return size;
    }

    public void MergeFrom(S2C_StopTyping other) {
      if (other == null) {
        return;
      }
      if (other.UserName.Length != 0) {
        UserName = other.UserName;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            UserName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class S2C_Message : pb::IMessage<S2C_Message> {
    private static readonly pb::MessageParser<S2C_Message> _parser = new pb::MessageParser<S2C_Message>(() => new S2C_Message());
    public static pb::MessageParser<S2C_Message> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.MsgReflection.Descriptor.MessageTypes[8]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public S2C_Message() {
      OnConstruction();
    }

    partial void OnConstruction();

    public S2C_Message(S2C_Message other) : this() {
      userName_ = other.userName_;
      message_ = other.message_;
    }

    public S2C_Message Clone() {
      return new S2C_Message(this);
    }

    /// <summary>Field number for the "UserName" field.</summary>
    public const int UserNameFieldNumber = 1;
    private string userName_ = "";
    public string UserName {
      get { return userName_; }
      set {
        userName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Message" field.</summary>
    public const int MessageFieldNumber = 2;
    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as S2C_Message);
    }

    public bool Equals(S2C_Message other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserName != other.UserName) return false;
      if (Message != other.Message) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (UserName.Length != 0) hash ^= UserName.GetHashCode();
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (UserName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(UserName);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (UserName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserName);
      }
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    public void MergeFrom(S2C_Message other) {
      if (other == null) {
        return;
      }
      if (other.UserName.Length != 0) {
        UserName = other.UserName;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            UserName = input.ReadString();
            break;
          }
          case 18: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
